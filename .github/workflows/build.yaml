name: Build

on:
  workflow_call:
    inputs:
      project:
        required: true
        type: string
      ecr_repository:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
    outputs:
      ecr_registry:
        value: ${{ jobs.build.outputs.ecr_registry }}
      image_tag:
        value: ${{ jobs.build.outputs.image_tag }}


jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ecr_registry: ${{ steps.image-info.outputs.ecr_registry }}
      image_tag: ${{ steps.image-info.outputs.image_tag }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      # frontend
      - name: Set up Node.js
        if: ${{ inputs.project == 'frontend' }}
        uses: actions/setup-node@v2
        with:
          node-version: 20

      - name: Cache node modules
        if: ${{ inputs.project == 'frontend' }}
        uses: actions/cache@v2
        id: cache
        with:
          path: node_modules
          key: npm-modules-${{ hashFiles('**/package-lock.json') }}
          restore-keys: npm-modules-

      - name: Install dependencies
        if: ${{ inputs.project == 'frontend' && steps.cache.outputs.cache-hit != 'true'}}
        run: npm install

      # backend
      - name: Set up JDK
        if: ${{ inputs.project == 'backend' }}
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      # frontend & backend
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Get image tag
        id: image
        run: |
          VERSION=$(echo ${{ github.sha }} | cut -c1-8)
          echo VERSION=$VERSION
          echo "::set-output name=version::$VERSION"

      - name: Grant execute permission for gradlew
        run: chmod +x blog/gradlew

      - name: Build and push image to Amazon ECR
        id: image-info
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_repository }}
          IMAGE_TAG: ${{ steps.image.outputs.version }}
        run: |
          echo "::set-output name=ecr_registry::$ECR_REGISTRY"
          echo "::set-output name=image_tag::$IMAGE_TAG"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./blog
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
